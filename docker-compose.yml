services:
  api-gateway:
    build: ./backend/gateway
    container_name: "api-gateway"
    image: api-gateway:latest
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - inventoryApp-network
    depends_on:
      - mysql-database
      - api-products
      - api-users
      - api-inventories

  api-products:
    build: ./backend/products_mService
    container_name: "api-products"
    image: api-products:latest
    ports:
      - "8081:8081"
    env_file:
      - .env
    networks:
      - inventoryApp-network
    depends_on:
      mysql-database:
        condition: service_healthy

  api-users:
    build: ./backend/users_mService
    container_name: "api-users"
    image: api-users:latest
    ports:
      - "8082:8082"
    env_file:
      - .env
    networks:
      - inventoryApp-network
    depends_on:
      mysql-database:
        condition: service_healthy

  api-inventories:
    build: ./backend/inventory_mService
    container_name: "api-inventories"
    image: api-inventories:latest
    ports:
      - "8083:8083"
    env_file:
      - .env
    networks:
      - inventoryApp-network
    depends_on:
      mysql-database:
        condition: service_healthy

  mysql-database:
    image: mysql:8.0.42
    container_name: "mysql-database"
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database-data:/app/data
    networks:
      - inventoryApp-network

networks:
  inventoryApp-network:
    name: inventory-app-network

volumes:
  database-data:
